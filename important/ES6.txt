1. Template Literals
Template literals allow you to create strings that are easier to read and write, especially when incorporating variables or multiline strings.

Features:
Interpolation: Embed variables directly into the string using ${expression}.
Multiline Strings: No need for concatenation or newline characters.
Tagged Templates: Custom processing of template literals.

Example:

// Interpolation
const name = "Vishal";
const age = 30;
console.log(`My name is ${name} and I am ${age} years old.`);

// Multiline String
const address = `123 Main Street
Apt 4B
Springfield`;
console.log(address);

// Tagged Templates
function highlight(strings, ...values) {
  return strings.reduce((result, str, i) => `${result}${str}<b>${values[i] || ''}</b>`, '');
}
const result = highlight`Hello, ${name}. You are ${age} years old.`;
console.log(result);


-------------------------------------------------------------------------

2. Destructuring Assignment
Destructuring allows unpacking values from arrays or properties from objects into distinct variables.

Features:
Extract multiple values in one line.
Default values can be assigned.

Example:

// Array Destructuring
const numbers = [10, 20, 30];
const [a, b, c] = numbers;
console.log(a, b, c); // 10, 20, 30

// Object Destructuring
const person = { firstName: "Vishal", lastName: "Nagle", age: 30 };
const { firstName, age } = person;
console.log(firstName, age); // Vishal, 30

// Nested Destructuring
const company = {
  name: "Google",
  address: { city: "Mountain View", state: "CA" }
};
const { address: { city, state } } = company;
console.log(city, state); // Mountain View, CA

// Default Values
const { gender = "Male" } = person;
console.log(gender); // Male

-----------------------------------------------------------------------------

3. Spread/Rest Operators
The ... operator is used to spread elements of an array or object and to collect items into an array.

Features:
Spread: Expands elements into individual items.
Rest: Collects multiple elements into an array or object.

Example:

// Spread Operator
const arr1 = [1, 2, 3];
const arr2 = [4, 5];
const combined = [...arr1, ...arr2];
console.log(combined); // [1, 2, 3, 4, 5]

const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3 };
const merged = { ...obj1, ...obj2 };
console.log(merged); // { a: 1, b: 2, c: 3 }

// Rest Operator
function sum(...numbers) {
  return numbers.reduce((total, num) => total + num, 0);
}
console.log(sum(1, 2, 3, 4)); // 10

const { a, ...rest } = merged;
console.log(a, rest); // 1, { b: 2, c: 3 }

-----------------------------------------------------------------------------

4. Let, Const, and Block Scoping
let and const provide block scoping, replacing the function scoping of var. const is used for constants, while let is for variables that can change.

Features:
let: Allows reassignment, block-scoped.
const: Cannot be reassigned, block-scoped.
Avoids issues with var, such as hoisting and lack of block scope.

Example: 

if (true) {
  let blockScoped = "I exist only inside this block";
  console.log(blockScoped); // Works
}
// console.log(blockScoped); // ReferenceError

const PI = 3.14159;
// PI = 3.14; // Error: Assignment to constant variable

let x = 10;
x = 20; // Works
console.log(x);


-------------------------------------------------------------------------------------


5. Arrow Functions
Arrow functions provide a shorter syntax for writing functions and have lexical this binding.

Features:
Shorter syntax.
Do not bind their own this (lexical this).
Ideal for inline functions and callbacks.

Example:

// Regular Function
function add(a, b) {
  return a + b;
}
console.log(add(2, 3)); // 5

// Arrow Function
const multiply = (a, b) => a * b;
console.log(multiply(2, 3)); // 6

// Single Parameter and Implicit Return
const square = x => x * x;
console.log(square(4)); // 16

// Lexical `this`
function Counter() {
  this.count = 0;
  setInterval(() => {
    this.count++;
    console.log(this.count);
  }, 1000);
}
new Counter(); // Logs increasing count every second


--------------------------------------------------------------------------------------

These ES6+ features simplify coding, enhance readability, and bring powerful functionalities to JavaScript development.
